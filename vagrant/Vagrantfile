# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.provider "parallels" do |prl|
    prl.update_guest_tools = true
    prl.name = "Vagrant IIQ Serish"
    prl.customize ["set", :id, "--device-set", "cdrom0", "--image", "/Applications/Parallels Desktop.app/Contents/Resources/Tools/prl-tools-lin-arm.iso", "--connect"]
  end
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian-arm"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  config.vm.network "forwarded_port", guest: 8080, host: 8181, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 9090, host: 9090, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 9999, host: 9999, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 389, host: 1389, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 10389, host: 10389, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", bridge: "en1: Wi-Fi (AirPort)"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # config.ssh.private_key_path = ".vagrant/machines/default/virtualbox/private_key"
  config.ssh.dsa_authentication = false
  config.ssh.username = "sailpoint"
  config.ssh.password = "Sailp0!nt"
  #config.ssh.host = '192.168.56.10'

  config.vm.synced_folder "../ansible", "/tmp/vagrant"

  # config.vm.provision "shell",
  #   inline: "dnf -y upgrade kernel && dnf -y install gcc make perl kernel-devel elfutils-libelf-devel"

  config.vm.provision "ansible_local" do |ansible|
    ansible.become = true
    ansible.become_user = "root"
    ansible.playbook = "/tmp/vagrant/playbook.yml"
    ansible.galaxy_role_file = "/tmp/vagrant/roles/requirements.yml"
    ansible.galaxy_command = "ansible-galaxy  collection install -r /tmp/vagrant/roles/requirements.yml && ansible-galaxy install -r /tmp/vagrant/roles/requirements.yml"
    ansible.compatibility_mode = "2.0"
    ansible.vault_password_file = "/tmp/vagrant/vault-password-file"
    #ansible.verbose= "-vvvv"
    # To force java 11. The version is calculated in vars/main.yml which has a very high precedence
    ansible.extra_vars = {
  java_version: 11,
  java_default_version: 11
}

  end
end
