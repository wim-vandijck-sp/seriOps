<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Leverage Provisioning Plan" type="AccountSelector">
  <Description>AccountSelector Rules are used by the role modeler to automatically select a target account for provisioning when there are multiple candidates.
 
The return value is a Link instance that represents the selection. Value can be:

null - indicates that no automatic selection can be made

"prompt" - indicates that a separate account selector should be presented for the role

existing Link - the selected Link from the list of possible target Links

a new Link instance - indicates that a new account must be created with the identity specified by the create policy, or manually; in this case, the Link instance returned will have a null nativeIdentity attribute</Description>
  <Signature returnType="Link"/>
  <Source><![CDATA[
import sailpoint.object.Field;
import sailpoint.object.Link;
import sailpoint.object.Rule;
import sailpoint.object.Template; 
import sailpoint.object.Bundle; 
  
serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.LeverageProvPlanAccountSelector");

String nativeIdentity=null;
serilog.debug("Building native identity as specified in the provisioning plan for: "+application.getName());
String identityAttribute=application.getSchema("account").getIdentityAttribute();
serilog.debug("Identity Attribute="+identityAttribute);

// fix bug where role is not passed on to AccountSelector
// Rule even though the code clearly intends to.
if (null != accountRequest) {
  serilog.debug("AccountRequest: ");
  serilog.debug(accountRequest.toXml());
  String sourceRole = accountRequest.getSourceRole();
  if (sailpoint.tools.Util.isNotNullOrEmpty(sourceRole)) {
    role = context.getObjectByName(Bundle.class, sourceRole);
  }
  serilog.debug("Found role " + sourceRole);
}

// Now find the 'create' provisioning template for the app
List templates=application.getTemplates();
boolean foundTemplate=false;
for(Template template: templates) {
  if(template.getUsage()==Template.Usage.Create) {

  foundTemplate=true;

    // Now find the identity attribute field
    boolean foundField=false;

    for(Field field: template.getFields()) {
      if(field.getName().equals(identityAttribute)) {
        foundField=true;
        serilog.debug("Got Identity Attribute field");

        Rule fieldRule=field.getRule();
        if(fieldRule==null) {
          serilog.error("field "+field.getName()+" on application "+application.getName()+" has no rule");
          // No automatic selection can be made
          return null;
        }

        // Enumerate the rule
        Map args = new HashMap();
        args.put("role", role);
        args.put("identity", identity);

        // log and context are added by runRule
        nativeIdentity=context.runRule(fieldRule, args);
        serilog.debug("field value rule returns: "+nativeIdentity);          
        break;
      }
    }//50
    if(!foundField) {
  serilog.error("No Identity attribute field found in create on Application: "+application.getName());
      // No automatic selection can be made
      return null;
    }
    break;
  }
}
if(!foundTemplate) {
  serilog.error("No Create template on Application: "+application.getName());
  // No automatic selection can be made
  return null;
}

if(nativeIdentity==null) {
  serilog.error("Could not evaulate native identity for some reason");
  // No automatic selection can be made
  return null;
}

// Check links for one with nativeIdentity
// If we find one, return that
// otherwise, return a new link with that native identity
List links=identity.getLinks(application);
if(links==null) {
  serilog.debug("No links found for application");
  return new Link();
}
for(Link foundLink: links) {//80
  String natIden=foundLink.getNativeIdentity();
  serilog.debug("Checking "+natIden+" vs "+nativeIdentity);
  if(natIden.equals(nativeIdentity)) {
    serilog.debug("found!");
    return foundLink;
  }
}
serilog.debug("No existing link found with nativeIdentity="+nativeIdentity);
Link retLink=new Link();
retLink.setNativeIdentity(nativeIdentity);
return retLink;
  ]]></Source>
</Rule>
