<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Job Title Change" type="Listener">
    <Description>This rule can be used when the ObjectAttribute being listened to has changed.</Description>
    <Signature returnType="void">
        <Inputs>
            <Argument name="log">
                <Description>
          The log object associated with the SailPointContext.
        </Description>
            </Argument>
            <Argument name="context">
                <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
            </Argument>
            <Argument name="environment">
                <Description>
          Optional arguments passed from the task executor, if the rule is running within a task.
        </Description>
            </Argument>
            <Argument name="identity">
                <Description>
          The identity which owns the attribute.
        </Description>
            </Argument>
            <Argument name="attributeDefinition">
                <Description>
          The definition of the ObjectAttribute.
        </Description>
            </Argument>
            <Argument name="attributeName">
                <Description>
          The name of the ObjectAttribute.
        </Description>
            </Argument>
            <Argument name="oldValue">
                <Description>
          The original value of the ObjectAttribute.
        </Description>
            </Argument>
            <Argument name="newValue">
                <Description>
          The new value of the ObjectAttribute.
        </Description>
            </Argument>
        </Inputs>
    </Signature>
    <Source><![CDATA[
    import sailpoint.object.Identity;
    import sailpoint.object.QueryOptions;
    import sailpoint.object.Filter;
    import sailpoint.object.Bundle;
    import sailpoint.object.IdentityEntitlement;
    import sailpoint.object.Configuration;
    import sailpoint.tools.Util;
    import sailpoint.tools.GeneralException;
    
    serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.JobTitleChange");
    serilog.debug(identity.getName());
    //Set oldJobTitle so the Role selector will keep assigned roles for job changes
	serilog.debug("\tOldValue    : " + oldValue);
	serilog.debug("\tNewValue    : " + newValue);
	if ( (oldValue != null) && (oldValue != newValue) ) {
       serilog.debug("\tSetting OldJobTitle to " + oldValue);
       identity.setAttribute("oldJobTitle",oldValue);
    

       
       Configuration oldRoleConfig = context.getObjectByName(Configuration.class,"RapidSetup Mover Previous Job Roles");
       if (oldRoleConfig == null) {
          throw new GeneralException("Old Role Configuration Not Found!");
       }

       
       //Now find all current rule assigned roles and store them in config object
       ArrayList roles = new ArrayList();
       QueryOptions qo = new QueryOptions();
       qo.addFilter(Filter.eq("identity.id",identity.getId()));
       qo.addFilter(Filter.eq("source","Rule"));
       qo.addFilter(Filter.eq("name","assignedRoles"));
       Iterator it = context.search(IdentityEntitlement.class,qo);
       while ( (it != null) && (it.hasNext()) ) {
          IdentityEntitlement ie = it.next();
          String roleName = ie.getValue();
          serilog.debug("Storing IdentityEntitlement for Role " + roleName);
          roles.add(ie.getId());
       }
       serilog.debug("Saving Roles to Config");
       if (!roles.isEmpty()) {
          serilog.debug(roles.toString());
       }
       oldRoleConfig.put(identity.getName(),roles);
       context.saveObject(oldRoleConfig);
       context.commitTransaction();
       Util.flushIterator(it);
       context.commitTransaction();

	} else {
	   serilog.debug("\tOldValue is null or equal to new value");
	}
    
    
    ]]></Source>
</Rule>