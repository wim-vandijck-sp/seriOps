---
# TODO: cn=config contains nsslapd-requiresrestart, a list of things that need a restart. Check that all of them have "notify: dirsrv restart"...

# TODO: are nsCertFile and nsKeyFile still allowed, instead of the NSS database which is nearly impossible to handle correctly?
# https://www.port389.org/docs/389ds/howto/howto-ssl.html

- include: install_389ds.yml

- name: Check that tls_enforced makes sense
  assert:
    that:
      - dirsrv_tls_enabled
    msg: "dirsrv_tls_enforced: true doesn't make sense when dirsrv_tls_enabled: false, enable TLS or disable enforcing"
  when: dirsrv_tls_enforced | bool
  tags: [ dirsrv_tls ]

- name: Check if TLS is enforced (secure binds)
  command: "grep \"nsslapd-require-secure-binds: on\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_binds
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_binds.rc != 0 and dirsrv_tls_enforced_initially_binds.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

# If nsslapd-minssf isn't set at all, it defaults to 0.
# So we have to check if it's defined...
- name: Check if TLS is enforced (minimum SSF is set)
  command: "grep \"nsslapd-minssf:\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_ssf_set
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_ssf_set.rc != 0 and dirsrv_tls_enforced_initially_ssf_set.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

# ...and if it's 0 or something else.
- name: Check if TLS is enforced (minimum SSF)
  command: "grep \"nsslapd-minssf: 0\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_ssf
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_ssf.rc != 0 and dirsrv_tls_enforced_initially_ssf.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

- name: Prepare LDAP auth data
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags
  set_fact:
    # LDAPI or binding port 389 without STARTTLS will fail, if TLS
    # is enforced. But we can't bind on port 636 or use STARTTLS
    # without checking: when the server has been just installed, no
    # certificates and no TLS are available.
    # The condition checks "secure-binds is on (found) OR minssf is not 0 (is set and is not 0)"
    dirsrv_starttls_early: "{{ dirsrv_tls_enforced_initially_binds.rc == 0 \
      or (dirsrv_tls_enforced_initially_ssf_set.rc == 0 and dirsrv_tls_enforced_initially_ssf.rc == 1) }}"

- name: Configure listen address
  ldap_attr:
    server_uri: "{{ dirsrv_server_uri }}"
    validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
    start_tls: "{{ dirsrv_starttls_early }}"
    bind_dn: "{{ dirsrv_rootdn }}"
    bind_pw: "{{ dirsrv_rootdn_password }}"
    dn: "cn=config"
    name: "nsslapd-listenhost"
    values: "{{ dirsrv_listen_host }}"
    state: exact
  register: dirsrv_restart_condition_main
  when: dirsrv_listen_host != None

- include: configure_authentication.yml
  when: not dirsrv_factory

- include: configure_logging.yml
  when: not dirsrv_factory

- include: configure_plugins.yml

- include: configure_schema.yml

- include: configure_tls.yml

# Required also to enforce TLS as TLS must be enabled beforehand (requiring a restart).
- name: "Restart {{ dirsrv_serverid }} to enable TLS, authentication, plugins"
  service:
    name: "dirsrv@{{ dirsrv_serverid }}"
    state: restarted
  # Cannot use an handler due to https://github.com/lvps/389ds-server/issues/16
  # Cannot use use any fancy woarkaround due to https://github.com/ansible/ansible/issues/63822
  # Cannot use a generic name for the handler since https://github.com/lvps/389ds-server/pull/14, it *has* to be tied to the server
  when: "(dirsrv_restart_condition_main is defined and dirsrv_restart_condition_main.changed) or\
        (dirsrv_restart_condition_plugins_1 is defined and dirsrv_restart_condition_plugins_1.changed) or\
        (dirsrv_restart_condition_plugins_2 is defined and dirsrv_restart_condition_plugins_2.changed) or\
        (dirsrv_restart_condition_plugins_3 is defined and dirsrv_restart_condition_plugins_3.changed) or\
        (dirsrv_restart_condition_plugins_4 is defined and dirsrv_restart_condition_plugins_4.changed) or\
        (dirsrv_restart_condition_auth_1 is defined and dirsrv_restart_condition_auth_1.changed) or\
        (dirsrv_restart_condition_auth_2 is defined and dirsrv_restart_condition_auth_2.changed) or\
        (dirsrv_restart_condition_tls_1 is defined and dirsrv_restart_condition_tls_1.changed) or\
        (dirsrv_restart_condition_tls_2 is defined and dirsrv_restart_condition_tls_2.changed) or\
        (dirsrv_restart_condition_tls_3 is defined and dirsrv_restart_condition_tls_3.changed) or\
        (dirsrv_restart_condition_tls_4 is defined and dirsrv_restart_condition_tls_4.changed) or\
        (dirsrv_restart_condition_tls_5 is defined and dirsrv_restart_condition_tls_5.changed) or\
        (dirsrv_restart_condition_tls_6 is defined and dirsrv_restart_condition_tls_6.changed)"
  register: dirsrv_restart_condition_has_restarted

- name: "Reload schema on {{ dirsrv_serverid }}"
  ldap_entry:
    server_uri: "{{ dirsrv_server_uri }}"
    validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
    start_tls: "{{ dirsrv_tls_enforced }}"
    bind_dn: "{{ dirsrv_rootdn }}"
    bind_pw: "{{ dirsrv_rootdn_password }}"
    dn: "cn=ansible-managed schema reload,cn=schema reload task,cn=tasks,cn=config"
    objectClass:
      - extensibleObject
    attributes:
      cn: ansible-managed schema reload
      schemadir: "/etc/dirsrv/slapd-{{ dirsrv_serverid }}/schema/"
    state: present
  when: "not dirsrv_restart_condition_has_restarted and (\
        (dirsrv_restart_condition_schema_reload_1 is defined and dirsrv_restart_condition_schema_reload_1.changed) or\
        (dirsrv_restart_condition_schema_reload_2 is defined and dirsrv_restart_condition_schema_reload_2.changed)\
        )"

- include: configure_tls_enforcing.yml

# This only happens if TLS is being enforced.
- name: "Restart {{ dirsrv_serverid }} to enforce TLS"
  service:
    name: "dirsrv@{{ dirsrv_serverid }}"
    state: restarted
  when: "(dirsrv_restart_condition_tls_enforcing_1 is defined and dirsrv_restart_condition_tls_enforcing_1.changed) or\
        (dirsrv_restart_condition_tls_enforcing_2 is defined and dirsrv_restart_condition_tls_enforcing_2.changed)"
